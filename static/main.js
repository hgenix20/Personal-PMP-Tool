const VIEWS = ['dashboard','backlog','pis','gantt','risks','automations'];
const $ = (q) => document.querySelector(q);
const $$ = (q) => Array.from(document.querySelectorAll(q));
function h(tag, attrs={}, ...children){ const el = document.createElement(tag); for(const [k,v] of Object.entries(attrs)){ if(k.startsWith('on') && typeof v==='function') el.addEventListener(k.slice(2), v); else if(v!==undefined && v!==null) el.setAttribute(k,v);} for(const c of children){ if(Array.isArray(c)) c.forEach(x=> el.append(x)); else if(c instanceof Node) el.append(c); else if(c!==undefined && c!==null) el.append(String(c)); } return el;}
async function api(path, opts={}){ const res = await fetch(path,{headers:{'Content-Type':'application/json'},...opts}); if(!res.ok) throw new Error(`API ${path} -> ${res.status}`); return res.json(); }
function show(view){ $$('.nav-btn').forEach(b=> b.classList.toggle('active', b.dataset.view===view)); $$('.view').forEach(v=> v.classList.remove('visible')); $(`#view-${view}`).classList.add('visible'); }
$$('.nav-btn').forEach(b=> b.addEventListener('click', ()=> show(b.dataset.view)));
// ---- Dashboard ----
async function loadDashboard(){ const data = await api('/api/dashboard'); const tl = $('#taskLoad'); tl.innerHTML=''; for(const [k,v] of Object.entries(data.task_load)){ tl.append(h('span',{class:'badge'},`${k}: ${v}`),' ');} const due=$('#dueList'); due.innerHTML=''; data.due_this_week.forEach(t=> due.append(h('li',{},h('span',{},t.title),h('span',{class:'badge'},t.due_date||t.planned_end_date)))); const issues=$('#issueList'); issues.innerHTML=''; data.open_issues.forEach(t=> issues.append(h('li',{},h('span',{},t.title),h('span',{class:'badge'},t.priority)))); const risks=$('#riskList'); risks.innerHTML=''; data.risks_due.forEach(r=> risks.append(h('li',{},h('span',{},r.title),h('span',{class:'badge'},r.review_date)))); renderWeeklyGantt(data.due_this_week, data.week_start, data.week_end); await renderDashboardPies(); }
async function renderDashboardPies(){ const [tasks,pis,sprints]= await Promise.all([api('/api/tasks'), api('/api/pis'), api('/api/sprints')]); const today = new Date().toISOString().slice(0,10); const currentPI = pis.find(p=> p.start_date<=today && today<=p.end_date); const currentSprints = sprints.filter(s=> s.start_date<=today && today<=s.end_date); const currentSprint = currentSprints[0]; const countsBy = (scope)=>{ const statuses=['backlog','to-do','in progress','blocked','done','cancelled']; const map = Object.fromEntries(statuses.map(s=>[s,0])); tasks.forEach(t=>{ if(scope==='pi' && currentPI && t.pi_id!==currentPI.id) return; if(scope==='sprint' && currentSprint && t.sprint_id!==currentSprint.id) return; if(map[t.status]!==undefined) map[t.status]++; }); return map;}; drawPie($('#piPie'), countsBy('pi'), 'PI'); drawPie($('#sprintPie'), countsBy('sprint'), 'Sprint'); }
function drawPie(container, counts, label){ container.innerHTML=''; const total = Object.values(counts).reduce((a,b)=>a+b,0)||1; const size=180, r=size/2; const svg = h('svg',{width:size,height:size,viewBox:`0 0 ${size} ${size}`}); let angle=0; const palette=['#22d3ee','#a78bfa','#f59e0b','#ef4444','#10b981','#9ca3af']; Object.entries(counts).forEach(([k,v],i)=>{ const a2 = angle + (v/total)*Math.PI*2; const x1=r + r*Math.cos(angle), y1=r + r*Math.sin(angle); const x2=r + r*Math.cos(a2), y2=r + r*Math.sin(a2); const large = a2-angle>Math.PI?1:0; const path = `M ${r} ${r} L ${x1} ${y1} A ${r} ${r} 0 ${large} 1 ${x2} ${y2} Z`; svg.append(h('path',{d:path, fill:palette[i%palette.length], opacity:0.9, stroke:'rgba(0,0,0,.4)'})); angle=a2;}); svg.append(h('text',{x:r,y:r,dominantBaseline:'middle',textAnchor:'middle',fill:'#111',fontSize:'14',fontWeight:'700'}, label)); container.append(svg); }
function renderWeeklyGantt(tasks, startISO, endISO){ const wrap=$('#weeklyGantt'); wrap.innerHTML=''; const start=new Date(startISO); const end=new Date(endISO); const totalDays=(end-start)/86400000 + 1; tasks.slice(0,8).forEach(t=>{ const due=new Date(t.due_date||t.planned_end_date); const offset=Math.max(0, Math.floor((due-start)/86400000)); const bar=h('div',{class:'gantt-bar', style:`width:${Math.max(10,100/totalDays)}%; margin-left:${(offset/totalDays)*100}%`}, h('span',{class:'label'}, t.title)); wrap.append(h('div',{class:'gantt-row'}, bar)); }); }
// ---- Backlog ----
let backlogMode='list'; let editingId=null; $('#toggleBacklogMode').addEventListener('click', ()=>{ backlogMode = backlogMode==='list'?'kanban':'list'; $('#backlogListMode').classList.toggle('hidden', backlogMode!=='list'); $('#kanbanMode').classList.toggle('hidden', backlogMode!=='kanban'); loadBacklog(); }); $('#addTaskBtn').addEventListener('click', ()=> openTaskModal()); $('#taskCancel').addEventListener('click', ()=> closeTaskModal()); $('#taskSave').addEventListener('click', saveTaskFromModal); function openTaskModal(t=null){ editingId = t?.id || null; $('#taskModalTitle').textContent = t? 'Edit Item' : 'New Item'; $('#m_title').value = t?.title||''; $('#m_type').value = t?.type||'task'; $('#m_status').value = t?.status||'backlog'; $('#m_priority').value = t?.priority||'medium'; $('#m_planned_start').value = t?.planned_start_date||t?.start_date||''; $('#m_planned_end').value = t?.planned_end_date||t?.end_date||''; $('#m_actual_end').value = t?.actual_end_date||''; try{ const deps = t?.dependencies ? JSON.parse(t.dependencies) : []; $('#m_deps').value = deps.join(','); }catch{ $('#m_deps').value=''; } $('#taskModal').classList.remove('hidden'); } function closeTaskModal(){ $('#taskModal').classList.add('hidden'); } async function saveTaskFromModal(){ const payload = { title: $('#m_title').value, type: $('#m_type').value, status: $('#m_status').value, priority: $('#m_priority').value, planned_start_date: $('#m_planned_start').value||null, planned_end_date: $('#m_planned_end').value||null, actual_end_date: $('#m_actual_end').value||null, dependencies: ($('#m_deps').value||'').split(',').map(s=> Number(s.trim())).filter(n=> !isNaN(n)) }; // also mirror planned_* to start/end for gantt
 payload.start_date = payload.planned_start_date; payload.end_date = payload.planned_end_date; if(editingId){ payload.id = editingId; await api('/api/tasks',{method:'PUT', body: JSON.stringify(payload)}); } else { await api('/api/tasks',{method:'POST', body: JSON.stringify(payload)}); } closeTaskModal(); loadBacklog(); loadDashboard(); } async function loadBacklog(){ const tasks = await api('/api/tasks'); if(backlogMode==='list'){ const tbody=$('#backlogTableBody'); tbody.innerHTML=''; tasks.forEach(t=>{ const tr = h('tr',{}, h('td',{}, t.title), h('td',{}, t.type||''), h('td',{}, t.status||''), h('td',{}, t.priority||''), h('td',{}, `${t.planned_start_date||''} â†’ ${t.planned_end_date||''}`), h('td',{}, t.actual_end_date||''), h('td',{}, h('button',{class:'link',onclick:()=>openTaskModal(t)},'Edit'),' Â· ', h('button',{class:'link',onclick:()=>delTask(t.id)},'Delete')) ); tbody.append(tr); }); } else { const cols=['backlog','to-do','in progress','blocked','done','cancelled']; cols.forEach(s=> $(`#col-${s}`).innerHTML=''); tasks.forEach(t=>{ const card=h('div',{class:'card-item',draggable:'true'}, h('div',{class:'title'}, t.title), h('div',{class:'meta'}, h('span',{}, t.type||''), h('span',{}, t.priority||''), t.planned_end_date ? h('span',{}, t.planned_end_date): '')); card.addEventListener('dragstart', e=>{ e.dataTransfer.setData('text/plain', String(t.id)); card.classList.add('dragging');}); card.addEventListener('dragend', ()=> card.classList.remove('dragging')); $(`#col-${t.status}`).append(card); }); } } $$('.kanban-drop').forEach(box=>{ box.addEventListener('dragover', e=>{e.preventDefault()}); box.addEventListener('drop', async e=>{ e.preventDefault(); const id = Number(e.dataTransfer.getData('text/plain')); const status = box.parentElement.dataset.status; await api('/api/tasks',{method:'PUT', body: JSON.stringify({id, status})}); loadBacklog(); loadDashboard(); }); }); async function delTask(id){ if(!confirm('Delete item?')) return; await api('/api/tasks',{method:'DELETE', body: JSON.stringify({id})}); loadBacklog(); loadDashboard(); }
// ---- PIs/Sprints/Timeoff (unchanged from earlier) ----
$('#addPIBtn').addEventListener('click', async ()=>{ const name=prompt('PI name?'); if(!name) return; const start_date=prompt('Start YYYY-MM-DD?'); const end_date=prompt('End YYYY-MM-DD?'); await api('/api/pis',{method:'POST', body: JSON.stringify({name,start_date,end_date})}); loadPI(); }); $('#addSprintBtn').addEventListener('click', async ()=>{ const pi_id=Number(prompt('PI id?')); if(!pi_id) return; const name=prompt('Sprint name?'); const start_date=prompt('Start YYYY-MM-DD?'); const end_date=prompt('End YYYY-MM-DD?'); await api('/api/sprints',{method:'POST', body: JSON.stringify({pi_id,name,start_date,end_date})}); loadPI(); }); $('#addTimeOffBtn').addEventListener('click', async ()=>{ const date=prompt('Date YYYY-MM-DD?'); if(!date) return; const category=prompt('Category (holiday/vacation/pto)?')||'holiday'; const note=prompt('Note?')||''; await api('/api/timeoff',{method:'POST', body: JSON.stringify({date,category,note})}); loadPI(); }); async function loadPI(){ const [pis,sprints,offs] = await Promise.all([api('/api/pis'), api('/api/sprints'), api('/api/timeoff')]); const piTable=$('#piTable'); piTable.innerHTML=''; pis.forEach(p=>{ const tr=h('tr',{}, h('td',{},p.name), h('td',{},p.start_date||''), h('td',{},p.end_date||''), h('td',{},h('button',{class:'link',onclick: async()=>{ const name=prompt('Name',p.name)||p.name; const start_date=prompt('Start YYYY-MM-DD',p.start_date||'')||p.start_date; const end_date=prompt('End YYYY-MM-DD',p.end_date||'')||p.end_date; await api('/api/pis',{method:'PUT', body: JSON.stringify({id:p.id,name,start_date,end_date})}); loadPI(); }}, 'Edit')) ); piTable.append(tr); }); const sprintTable=$('#sprintTable'); sprintTable.innerHTML=''; sprints.forEach(s=>{ const tr=h('tr',{}, h('td',{},s.pi_id), h('td',{},s.name), h('td',{},s.start_date||''), h('td',{},s.end_date||''), h('td',{},h('button',{class:'link',onclick: async()=>{ const name=prompt('Name',s.name)||s.name; const start_date=prompt('Start',s.start_date||'')||s.start_date; const end_date=prompt('End',s.end_date||'')||s.end_date; await api('/api/sprints',{method:'PUT', body: JSON.stringify({id:s.id,name,start_date,end_date})}); loadPI(); }}, 'Edit')) ); sprintTable.append(tr); }); const toTable=$('#timeoffTable'); toTable.innerHTML=''; offs.forEach(o=>{ const tr=h('tr',{}, h('td',{},o.date), h('td',{},o.category||''), h('td',{},o.note||''), h('td',{},h('button',{class:'link',onclick: async()=>{ if(!confirm('Delete?')) return; await api('/api/timeoff',{method:'DELETE', body: JSON.stringify({id:o.id})}); loadPI(); }}, 'Delete')) ); toTable.append(tr); }); }
// ---- Gantt ----
$('#refreshGantt').addEventListener('click', loadGantt); $('#ganttSearch').addEventListener('input', ()=> highlightGantt($('#ganttSearch').value)); $('#ganttZoom').addEventListener('change', loadGantt); async function loadGantt(){ const [tasks,pis,sprints]= await Promise.all([api('/api/tasks'), api('/api/pis'), api('/api/sprints')]); renderGanttBands(pis, sprints, tasks); renderGantt(tasks); } function renderGanttBands(pis, sprints, tasks){ const canvas=$('#ganttCanvas'); const bandPI=$('#band-pi'); const bandSprint=$('#band-sprint'); bandPI.innerHTML=''; bandSprint.innerHTML=''; if(tasks.length===0) return; const dates = tasks.map(t=> t.start_date||t.planned_start_date||t.due_date).filter(Boolean).map(d=> new Date(d)); const min = new Date(Math.min(...dates)); const maxCandidates = tasks.map(t=> t.end_date||t.planned_end_date||t.due_date||t.start_date).filter(Boolean).map(d=> new Date(d)); const max = new Date(Math.max(...maxCandidates)); const spanDays = Math.max(1, Math.ceil((max-min)/86400000)+1); function placeBar(container, start, end, label){ const left = ((new Date(start)-min)/86400000)/spanDays*100; const width = (Math.max(1, (new Date(end)-new Date(start))/86400000))/spanDays*100; const bar = h('div',{class:'band-bar', style:`left:${left}%; width:${width}%`}); const wrap = h('div',{}, h('div',{class:'band-label'}, label), bar); container.append(wrap); } pis.forEach(p=> placeBar(bandPI, p.start_date, p.end_date, p.name)); sprints.forEach(s=> placeBar(bandSprint, s.start_date, s.end_date, s.name)); } function renderGantt(tasks){ const canvas=$('#ganttCanvas'); canvas.innerHTML=''; if(tasks.length===0){ canvas.textContent='No tasks yet'; return;} const zoom=$('#ganttZoom').value; const datesStart = tasks.map(t=> t.start_date||t.planned_start_date||t.due_date).filter(Boolean).map(d=> new Date(d)); const datesEnd = tasks.map(t=> t.end_date||t.planned_end_date||t.due_date||t.start_date).filter(Boolean).map(d=> new Date(d)); const min = new Date(Math.min(...datesStart)); const max = new Date(Math.max(...datesEnd)); const baseSpanDays = Math.max(1, Math.ceil((max-min)/86400000)+7); const minWindow = zoom==='day'?14 : zoom==='week'?60 : 120; const spanDays = Math.max(baseSpanDays, minWindow); tasks.forEach(t=>{ const s = new Date(t.start_date||t.planned_start_date||t.due_date||min); const e = new Date(t.end_date||t.planned_end_date||t.due_date||s); const left = ((s-min)/86400000)/spanDays*100; const width = Math.max(1, ((e-s)/86400000)||1)/spanDays*100; const bar=h('div',{class:'gantt-bar', style:`margin-left:${left}%; width:${width}%`}, h('span',{class:'label'}, t.title)); const row=h('div',{class:'gantt-row'}, bar); row.dataset.title=(t.title||'').toLowerCase(); canvas.append(row); }); } function highlightGantt(q){ const needle=q.toLowerCase(); $$('#ganttCanvas .gantt-row').forEach(r=>{ r.style.outline = r.dataset.title.includes(needle) && needle ? '2px solid var(--accent)' : 'none'; }); }
// ---- Risks ----
$('#addRiskBtn').addEventListener('click', async ()=>{ const title=prompt('Risk title?'); if(!title) return; const impact=prompt('Impact (low/medium/high/severe)','medium'); const probability=prompt('Probability (low/medium/high)','low'); const review_date=prompt('Review date YYYY-MM-DD?'); await api('/api/risks',{method:'POST', body: JSON.stringify({title,impact,probability,review_date})}); loadRisks(); loadDashboard(); }); async function loadRisks(){ const risks = await api('/api/risks'); const tbody=$('#riskTable'); tbody.innerHTML=''; risks.forEach(r=>{ const tr=h('tr',{}, h('td',{},r.title), h('td',{},r.impact||''), h('td',{},r.probability||''), h('td',{},r.status||''), h('td',{},r.review_date||''), h('td',{},r.mitigation||''), h('td',{}, h('button',{class:'link',onclick: async()=>{ const status=prompt('Status',r.status||'open')||r.status; const mitigation=prompt('Mitigation',r.mitigation||'')||r.mitigation; await api('/api/risks',{method:'PUT', body: JSON.stringify({id:r.id,status,mitigation})}); loadRisks(); loadDashboard(); }}, 'Edit')) ); tbody.append(tr); }); }
// ---- Automations ----
async function loadAutomations(){ const items = await api('/api/automations'); const box=$('#automationList'); box.innerHTML=''; if(items.length===0){ box.textContent='Drop .py files into automations/'; return;} items.forEach(it=>{ box.append(h('button',{class:'primary', onclick:()=>runAutomation(it.name)}, it.name)); box.append(' '); }); } async function runAutomation(name){ const out=$('#automationOutput'); out.textContent='Running...'; try{ const res=await api('/api/automations/run',{method:'POST', body: JSON.stringify({name})}); out.textContent=(res.stdout||'') + (res.stderr? '\nERR:\n'+res.stderr:''); }catch(e){ out.textContent='Error: '+e.message; } }
// Seed & init
$('#seedBtn').addEventListener('click', async ()=>{ if(!confirm('This will replace existing sample rows. Continue?')) return; await api('/api/seed',{method:'POST'}); await Promise.all([loadDashboard(), loadBacklog(), loadPI(), loadRisks(), loadGantt(), loadAutomations()]); alert('Seeded!');}); (async function init(){ show('dashboard'); await Promise.all([loadDashboard(), loadBacklog(), loadPI(), loadRisks(), loadGantt(), loadAutomations()]); })();
